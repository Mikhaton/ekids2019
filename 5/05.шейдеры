var шейдерВершинный = null;
var шейдерФрагментный = null;

fun??? задатьШейдеры()
{
    шейдерВершинный =
`
varying vec3 position;
varying vec3 normal;

void main()
{
    // Pass vertex.
    // Convert from Model/Object space to Screen one.
    gl_Position = gl_ModelViewProjectionMatrix * gl_Vertex;

    // Pass position and normal in Camera/Eye space.
    position = vec3(gl_ModelViewMatrix * gl_Vertex);
    normal = vec3(gl_ModelViewMatrix * vec4(gl_Normal, 0.0));
}
`;
    шейдерФрагментный =
`
#ifdef GL_ES
    precision highp float;
#endif

varying vec3 position;
varying vec3 normal;

const vec3 lightPosition = vec3(10, 20, 10);
uniform vec3 color;

float lambertianReflectanceStrength(vec3 position, vec3 lightPosition)
{
    // Light direction.
    vec3 lightVector = normalize(lightPosition - position);
    // Light flux strength.
    float strength = dot(normal, lightVector);
    float diffuse = max(strength, 0.2);
    // Add attenuation.
    //float distance = length(lightPosition - position);
    //return diffuse * (1.0 / (1.0 + (0.25 * distance * distance)));
    return diffuse;
}

void main()
{
    vec3 finalColor = color * lambertianReflectanceStrength(position, lightPosition);
    gl_FragColor = vec4(finalColor, 1.0);
}
`;
}
